import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.eserver.*;
import java.rmi.server.UID;

public class MachRYSettingService
{
	@PersistenceContext('main')
	def em
    
	@Service('LogService')
    def logSvc
	
	@Service('Var')
	def var 
    
	@Service('RYSettingService')
	def rysettingSvc
	
	def SCHEMA_NAME = 'machrysetting'
	def SETTING_TYPE = 'mach' 
	
    @ProxyMethod
    public boolean settingExists() {
        def setting = em.sqlContext.createNamedQuery('machrysetting:getList').setMaxResults(1).singleResult 
        return setting != null
    }
    
    @ProxyMethod 
    public List getList( searchText ) {
        def list = []
        if( ! searchText ) 
            return em.sqlContext.createNamedQuery('machrysetting:getList').resultList
        return em.sqlContext.createNamedQuery('machrysetting:getListByRy').setParameter('ry', searchText).resultList
    }
    
    @ProxyMethod
    public def create( entity ) {
        entity.schemaname = 'machrysetting'
        entity.schemaversion = '1.0'
		if( ! entity.lgus ) {
			entity.lgus = [[lguid:var.lgu_index, lguname:var.lgu_name, settingtype:SETTING_TYPE]]
		}
		entity.appliedto = entity.lgus.lguname.join(', ')
        validate( entity )
        em.create( entity.schemaname, entity )
        createAssessLevels( entity )
		rysettingSvc.createLgus( SETTING_TYPE, entity )
        logSvc.log('CREATE', 'MachRYSetting', entity.objid )
        return entity 
    }
    
	@ProxyMethod
	public Map copy( objid, newry ) {
		//allow only if there are still lgus not referenced 
		def lgus = rysettingSvc.lookupUnreferencedLgu( SETTING_TYPE, newry, null, null )
		if( ! lgus ) throw new Exception('All LGUs has already been referenced.')
		
		def entity = reviseSetting(newry+1, newry )
		entity.ry = newry 
		entity.appliedto = null 
		rysettingSvc.removeLgus( SETTING_TYPE, entity.objid )
		em.update(entity.schemaname, entity )
		return open( entity.objid )
	}
	
    @ProxyMethod
    public Map reviseSetting( newry, copyYear ) {
        required('Copy Year', copyYear )
        if( newry <= copyYear ) throw new Exception('New Revision Year must be greater than copy year.')
        def setting = em.sqlContext.createNamedQuery('machrysetting:getIdByRy').setParameter('ry', copyYear).singleResult
        if( !setting ) throw new Exception('Revision Year ' + copyYear  + ' setting is not defined.')
        
        //create setting 
        def settingoldid = setting.objid 
        setting = em.read( SCHEMA_NAME, [objid:settingoldid] )
        setting.previd = setting.objid 
        setting.objid = 'MS' + new UID()
        setting.ry = newry  
        checkDuplicateSetting( setting )
        em.create( setting.schemaname, setting )
        
        def assesslevels = getAssessLevels( settingoldid )
        assesslevels.each {
            it.previd = it.objid 
            it.objid = 'AL' + new UID()
            it.machrysettingid = setting.objid 
            saveAssessLevel( it )
        }
        
        def forexes = getForexes( settingoldid );
        forexes.each{
        	it.previd = it.objid;
        	it.objid = 'MF' + new UID();
        	it.machrysettingid = setting.objid;
        	saveForex( it );
        }
        rysettingSvc.copyLgus( SETTING_TYPE, setting.objid, settingoldid)
        return open( setting.objid )
    }
    
    @ProxyMethod
    public def update( entity ) {
        entity.appliedto = entity.lgus.lguname.join(', ')
		validate( entity )
        em.update( entity.schemaname, entity, { diff ->
            logSvc.logB( 'UPDATE', 'MachRYSetting', entity.objid, '', diff )
        } as UpdateChangeHandler )
		rysettingSvc.createLgus(SETTING_TYPE, entity )
        return entity 
    }
    
    @ProxyMethod 
    public Map open( objid ) {
        def entity = em.read('machrysetting', [objid:objid])
        if( !entity ) throw new Exception('Unable to load Revision Setting.\nVerify that the record still exists.' )
        entity.assesslevels = getAssessLevels( entity.objid )
        entity.forexes = getForexes( entity.objid )
		entity.lgus = rysettingSvc.loadLgus( SETTING_TYPE, objid )
        return entity 
    }
    
    @ProxyMethod
    public void remove( objid ) {
        checkRemoveAllowed( objid ) 
        removeAssessLevels( objid )
        removeForexes( objid )
		rysettingSvc.removeLgus(SETTING_TYPE, objid) 
        em.delete('machrysetting', [objid:objid])
    }
    
    /*----------------------------------------------------------
    * AssessLevel Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveAssessLevel( assessLevel ) {
        def schemaname = 'machrysetting:assesslevel'
        em.validate(schemaname, assessLevel )
        
        def old = em.read(schemaname, assessLevel )
        if( old ) {
            if( assessLevel.fixrate ) {
                assessLevel.ranges.clear()
            }
            em.update(schemaname, assessLevel )
        }
        else {
            em.create(schemaname, assessLevel )
        }
    }
    
    @ProxyMethod
    public void removeAssessLevel( assessLevel ) {
        def schemaname = 'machrysetting:assesslevel'
        em.delete(schemaname, assessLevel )
    }
    
    @ProxyMethod
    public List getAssessLevels( machrysettingid )  {
        def list = em.sqlContext.createNamedQuery('machrysetting:getAssessLevel').setParameter('machrysettingid', machrysettingid).resultList
        list.each {
            it.ranges = em.serializer.read( it.ranges )
            it.fixrate = it.fixrate as boolean 
        }
        return list 
    }
    
    void createAssessLevels( entity ){
        entity.assesslevels = []
		em.sqlContext.createNamedQuery( 'machrysetting:getPropertyClassification' ).resultList.each{
			def al = [
                objid       : 'AL' + new UID(),
                code        : it.classcode, 
                name        : it.classname,
                fixrate     : true,
                rate        : 0.0,
                previd      : null,
                machrysettingid : entity.objid ,
                ranges      : [],
            ]
            saveAssessLevel( al )
            entity.assesslevels.add( al ) 
		}
    }
    
    /*----------------------------------------------------------
    * Forex Methods
    ----------------------------------------------------------*/
    @ProxyMethod
    public void saveForex( forex ) {
        def schemaname = 'machrysetting:forex'
        em.validate(schemaname, forex )
        
        def old = em.read(schemaname, forex )
        if( old )
            em.update(schemaname, forex )
        else 
            em.create(schemaname, forex )
    }
    
    @ProxyMethod
    public void removeForex( forex ) {
        def schemaname = 'machrysetting:forex'
        em.delete(schemaname, forex )
    }
    
    @ProxyMethod
    public List getForexes( machrysettingid )  {
        return  em.sqlContext.createNamedQuery('machrysetting:getForex').setParameter('machrysettingid', machrysettingid).resultList
    }
    
    
    /*----------------------------------------------------------
    * Support Methods
    ----------------------------------------------------------*/
    void checkRemoveAllowed( machrysettingid ) {
        //TODO: allow remove if not referenced by bldgrpu
    }
    
    void removeAssessLevels( machrysettingid ) {
        em.sqlContext.createNamedExecutor('machrysetting:deleteAssessLevel').setParameter('machrysettingid', machrysettingid ).execute()
    }
    
    void removeForexes( machrysettingid ) {
        em.sqlContext.createNamedExecutor('machrysetting:deleteForex').setParameter('machrysettingid', machrysettingid ).execute()
    }
    
    
    void validate( entity ) {
        if( entity.ry <= 0 ) throw new Exception('Revision Year must be greater than zero.')
        //checkDuplicateSetting( entity )
        em.validate(entity.schemaname, entity )
    }
    
    void checkDuplicateSetting( entity ) {
        def data = em.sqlContext.createNamedQuery('machrysetting:checkDuplicate').setParameters( entity ).singleResult
        if( data ) throw new Exception('Setting for year ' + entity.ry + ' already exists.')
    }
    
	void required( caption, value ) {
		def msg = caption + ' is required.' 
		if( ! value ) 
			throw new Exception( msg )
		if( value instanceof String && value.trim().length() == 0 ) 
			throw new Exception( msg )
	}
    	
}
