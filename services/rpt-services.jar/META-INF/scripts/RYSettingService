import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.eserver.*;
import java.rmi.server.UID;

public class RYSettingService
{
	@PersistenceContext('main')
	def em
     
	@Service('LogService')
    def logSvc
	
	def RYSETTING_LGU_SCHEMA_NAME = 'rysetting:rysettinglgu' 
	
	@ProxyMethod
	public List lookupUnreferencedLgu( settingtype, ry, searchText, params ) {
		searchText = ( searchText ? searchText+'%' : '%' )
        def criteria = [settingtype:settingtype, lguname:searchText, ry:ry ]
        return getListByQuery('rysetting:lookupUnreferencedLgu'+settingtype, criteria, params )
    }
	
	@ProxyMethod 
	public void createLgus( settingtype, entity ) {
		if( ! entity.lgus ) {
			throw new Exception('Applied to LGU is required.')
		}
		removeLgus( settingtype, entity.objid )
		entity.lgus.each { lgu ->
			lgu.objid = entity.objid 
			em.create( RYSETTING_LGU_SCHEMA_NAME, lgu )
		}
	}
	
	@ProxyMethod
	public void removeLgus(settingtype, objid)  {
		em.sqlContext.createNamedExecutor('rysetting:deleteLgus')
			.setParameter('objid', objid)
			.setParameter('settingtype', settingtype)
			.execute()
	}
	
	@ProxyMethod
	public void copyLgus( settingtype, newsettingid, oldsettingid) {
		def lgus = loadLgus( settingtype, oldsettingid )
		lgus.each {
			it.objid = newsettingid
			em.create(RYSETTING_LGU_SCHEMA_NAME, it )
		}
	}
	
	@ProxyMethod
	public List loadLgus( settingtype, objid ) {
		def lgus = em.sqlContext.createNamedQuery('rysetting:getLguList')
						.setParameter('objid', objid)
						.setParameter('settingtype', settingtype)
						.resultList 
		lgus.each {
			it.lgu = [objid:objid, lguid:it.objid, lguname:it.lguname]
		}
		return lgus
	}

	private def getListByQuery(namedQuery, values, params ) {
		if( ! params ) params = [ _start:0, _limit:50 ]
		return em.sqlContext.createNamedQuery( namedQuery ).setParameters(values)
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
}
