import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class WebBPApplicationListingService
{
	
	@Service("BPBillingService")
	def billingSvc;
	
	@Service('SequenceService')
	def sequenceSvc;
	
	@Service('DateService')
	def dateService;
	
	@PersistenceContext('main')
	def em;

	def PERMIT_SCHEMA = 'bppermit:bppermit';
	
	def SCHEMANAME = 'bpapplication:bpapplication';
	
	private def format( def date, def format ){
		def sdf = new java.text.SimpleDateFormat( format );
		if( date instanceof Date ) return sdf.format( date );
		return sdf.parse( date );
	}

	def getResultList( def list, def qryname, def docstate, def searchText, def param ){
		list.clear();
		def qry = em.sqlContext.createNamedQuery( qryname );
		
		if( param.taxpayerid ) {
			def filter = ' and taxpayerid=$P{taxpayerid} ';
			qry.setVars([filter:filter]);
			qry.setParameter('taxpayerid', param.taxpayerid);
		}
		else {
			qry.setVars([filter:'']);
		}
		
		if( searchText ) qry.setParameter('search', searchText);
		if( docstate ) qry.setParameter('docstate', docstate);
		
		qry.setFirstResult( param._start );
		qry.setMaxResults( param._limit );
		list.addAll( qry.resultList );
		return list;
	}
	
	def getListByQuery( namedQuery, criteria, params ) {
		def qry = em.sqlContext.createNamedQuery( namedQuery );
		
        if( ! params ) params = [ _start:0, _limit:25]		
		if( params.taxpayerid ) {
			def filter = ' and taxpayerid=$P{taxpayerid} ';
			qry.setVars([filter:filter]);
			criteria.taxpayerid = params.taxpayerid;
		}
		else {
			qry.setVars([filter:'']);
		}
		
		return qry.setParameters( criteria )
				  .setFirstResult( params._start )
				  .setMaxResults( params._limit )
				  .resultList
	}
	
	@ProxyMethod
	public def getPendingList(searchText, params) {
		if( ! searchText ) 
			return getListByQuery('bpapplication:getList', [:], params)
		
		def criteria = [ tradename:searchText +'%', txnno:searchText+'%']
		def result = []
		if( (result = getListByQuery('bpapplication:getListByTradename', criteria, params)) ) return result
		if( (result = getListByQuery('bpapplication:getListByTxnno', criteria, params)) ) return result
		return result 
	}
	
	@ProxyMethod
	public def getList( def searchText, def docstate, def param ){
		def list = [];
		if( !docstate ){
			
			if( !searchText )  return getResultList(list, 'webbplisting:getRetiredList', 'ACTIVE', searchText, param);
			if( getResultList( list, 'webbplisting:getRetiredListByPermitNo', 'ACTIVE', searchText, param ) ) return list;
			if( getResultList( list, 'webbplisting:getRetiredListByBusinessName', 'ACTIVE', searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getRetiredListByTaxpayerName', 'ACTIVE', searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getRetiredListByBusinessAddress', 'ACTIVE', searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getRetiredListByTaxpayerAddress', 'ACTIVE', searchText+'%', param ) ) return list;
			
		}else if( docstate == 'EXPIRED' ){
		
			if( !searchText )  return getResultList(list, 'webbplisting:getForRenewalList', null, searchText, param);
			if( getResultList( list, 'webbplisting:getForRenewalListByPermitNo', null, searchText, param ) ) return list;
			if( getResultList( list, 'webbplisting:getForRenewalListByTradeName', null, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getForRenewalListByTaxpayerName', null, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getForRenewalListByBusinessAddress', null, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getForRenewalListByTaxpayerAddress', null, searchText+'%', param ) ) return list;
			
		}else{
		
			if( !searchText )  return getResultList(list, 'webbplisting:getList', docstate, searchText, param);
			if( getResultList( list, 'webbplisting:getListByPermitNo', docstate, searchText, param ) ) return list;
			if( getResultList( list, 'webbplisting:getListByBusinessName', docstate, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getListByTaxpayerName', docstate, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getListByBusinessAddress', docstate, searchText+'%', param ) ) return list;
			if( getResultList( list, 'webbplisting:getListByTaxpayerAddress', docstate, searchText+'%', param ) ) return list;
			
		}
		return list;
	}
	
	private def createBusinessPermit( def application ){
		def permit = [
			schemaname: PERMIT_SCHEMA,
			schemaversion: 1.0,
			docstate:'DRAFT',
			taxpayerid: application.taxpayerid,
			taxpayername: application.info.taxpayername,
			taxpayeraddress: application.info.taxpayeraddress,
			tradename: application.tradename,
			businessaddress: application.businessaddress,
			businessid: application.businessid,
			applicationid: application.objid,
			lobs: application.lobs,
			iyear	: application.iyear 
		];
		return permit;
	}
	
	@ProxyMethod
	public def releasePermit( def permit ){
		def app = em.read('bpapplication:bpapplication', [objid: permit.applicationid]);
		if( app.docstate != 'PERMIT_PENDING' ) throw new Exception("Only permit pending transaction can be released.");
		def bp = createBusinessPermit( app );
		
		bp.objid = "PERM" + new UID();
		bp.plateno = permit.plateno;
		bp.txnno = getNextPermitSeries();
		bp.info = ( permit.info ) ? permit.info : [:]
		
		bp.txndate = ( permit.txndate ) ? new java.text.SimpleDateFormat( 'yyyy-MM-dd' ).format( java.sql.Date.valueOf(permit.txndate) ) : dateService.serverDate 
		bp.docstate = 'ACTIVE';
		
		app.docstate = 'ACTIVE';
		em.update('bpapplication:bpapplication', app); 
		
		em.validate( PERMIT_SCHEMA, bp );
		em.create( PERMIT_SCHEMA, bp );
		
		def bplisting = em.read('bplisting:bpapplicationlisting', [objid: app.objid]);
		bplisting.docstate = 'ACTIVE';
		
		em.update( 'bplisting:bpapplicationlisting', bplisting );
		
		return bp;
	}
	
	@ProxyMethod
	public def openPermit( def applicationid ){
		def app = em.read('bpapplication:bpapplication', [objid:applicationid]);
		if( !app ) throw new Exception('Application does not exist.');
		def permit = em.sqlContext.createNamedQuery('webbplisting:findPermitByApplicationId')
		               .setParameter('applicationid', applicationid)
					   .singleResult;
		if( permit ) {
			permit.lobs = em.serializer.read( permit.lobs );
			return permit;
		}
		
		return createBusinessPermit( app );
	}
	
	private def getBilling( def applicationid ){
		def app = em.read('bpapplication:bpapplication', [objid: applicationid]);
		if( !app ) throw new Exception("Application with objid $entity.applicationid is no longer exist.");
		
		def bp = em.read('business:business', [objid: app.businessid]);
		if( !bp ) throw new Exception("Business with objid $app.businessid is no longer exist.");
	
		def bill = [
			ledgerid      : bp.objid,
			yearstarted   : bp.yearstarted,
			lastyearpaid  : bp.lastyearpaid,
			lastqtrpaid   : bp.lastqtrpaid,
			taxfees       : []
		];
		
		def getUnpaidReceivables = { 
			def list = app.receivables.findAll{ it.amount > it.amtpaid };
			if( app.txntype.matches('NEW|ADDLOB') ) return list;
			return list.findAll{ it.qtr <= entity.qtr || ( it.assessmentype.matches('NEW|ADDLOB')) }
		}
		
		def receivables = getUnpaidReceivables();
		receivables.each{  
			it.year = it.iyear;
			it.qtr = it.iqtr;
			bill.taxfees << it;
		}
		return billingSvc.buildBill( bill );
	}
	
	@ProxyMethod
	public def retireApplication( def applicationid ){
		def app = open( applicationid );
		if( !app.txntype.matches('RETIRE|RETIRELOB') ) throw new Exception('Unable to retire '+app.txntype+' transaction.');
		def billing = getBilling( app.objid );
		if( billing.taxfees ) throw new Exception("Unable to retire.\nApplication not yet fully paid.");
		app.docstate = 'ACTIVE';
		
		def bp = em.read('business:business', [objid: app.businessid]);
		def parentapp = open( app.parentid );
		
		if(app.txntype == 'RETIRE'){
			bp.applicationid = app.objid;
			bp.docstate = 'RETIRED';
			parentapp.docstate = 'RETIRED';
			em.update( 'business:business', bp );
			
			em.sqlContext.createNamedExecutor('bpapplication:updateApplicationListingDocstate')
			  .setParameter('objid', parentapp.objid) 
			  .setParameter('docstate', 'RETIRED')
			  .execute();
		}
		
		em.sqlContext.createNamedExecutor('bpapplication:updateApplicationListingDocstate')
			  .setParameter('objid', parentapp.objid) 
			  .setParameter('docstate', 'ACTIVE')
			  .execute();
		
		em.update( SCHEMANAME, parentapp );
		em.update( SCHEMANAME, app );
		
		return app;
	}
	
	private def getNextPermitSeries(){
		def year = new java.text.SimpleDateFormat('yyyy').format( new Date() );
		return year + sequenceSvc.getNextFormattedSeriesA( 'PERMIT'+year, 5 );
	}
	
	@ProxyMethod
	public def openRetireApplication( def applicationid ){
		def app = open( applicationid );
		def permit = openPermit( app.parentid );
		app.permitno = permit.txnno;
		return app;
	}
	
	def open( def objid ){
		def application = em.read( SCHEMANAME, [objid: objid] );
		if( !application ) throw new Exception("Application document no longer exist.");
		return application;
	}
}