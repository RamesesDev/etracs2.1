import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;
import java.text.DecimalFormat;

class LiquidationService {

	@PersistenceContext("main")
	def em;
	
	@Service("RemittanceService")
	def remsvc;
	
	@Service("ETRACSUserService")
	def userSvc;
	
	@Service("SequenceService")
	def seqsvc;
	
	@Service("DateService")
	def dtsvc;
	
	@Service("HTMLService")
	def htmlsvc;
	
	@Service("Var")
	def var;
	
	def CASHIER_ROLE = 'CASHIER'
	
	def SCHEMA_NAME = "liquidation:liquidation";
	def SCHEMA_VERSION = "1.0";
	def LISTSCHEMA_NAME = "liquidation:liquidationlist";
	
	@ProxyMethod
	public def getList( searchText, params ) {
		if ( !searchText ) {
			if( !params ) params = [:];
			if( !params._start ) params._start = 0;
			if( !params._limit ) params._limit = 50;
			return em.sqlContext.createNamedQuery( "liquidation:getList" )
			         .setFirstResult(params._start)
					 .setMaxResults(params._limit)
					 .resultList;
		}
		
		return em.sqlContext.createNamedQuery( "liquidation:getListByTxnno" ).setParameter('txnno', searchText).resultList;
	}
	
	@ProxyMethod
	public def createMultiCashier( liq ) {
		try {
			validateMulti( liq );
			updateLiquidationInfo( liq, 'multi' )
			// from now on, check for open liquidationrcds 
			liq.docstate = 'CLOSED' 
			em.validate( SCHEMA_NAME, liq );
			em.create( SCHEMA_NAME, liq );
			closeMultiCashierRemittance( liq );
			postLiquidationRcdMulti( liq )
			return liq;
		} 
		catch (ex) { 
			ex.printStackTrace()
			throw ex; 
		}
	}
	
	@ProxyMethod
	public def create( liq ) {
		
		try {
			validate( liq );
			updateLiquidationInfo( liq, 'single' )
			updateRCDCashierInfo( liq )
			updateRCDDenomination( liq )
			liq.fundsummaries = getFundSummaries( liq.objid );
			em.validate( SCHEMA_NAME, liq );
			em.create( SCHEMA_NAME, liq );
			closeRemittance( liq );
			postLiquidationRcd( liq )
			return liq;
		} 
		catch (ex) { 
			throw ex; 
		}
	}
	
	void updateLiquidationInfo( liq, opener  ) {
		liq.docstate = 'OPEN';
		liq.opener = opener 
		liq.dtposted = dtsvc.getServerDate()
		liq.txnno = generateLiqNo( liq.liquidatingofficerid );
		if( ! liq.txndate ) {
			liq.txndate = dtsvc.format( "yyyy-MM-dd", liq.dtposted);
		}
		buildCustomTimeStamp( liq )
		updateCashierInfo( liq )
	}
	
	
	private void validateMulti( liq ) {
		liq.rcds.each { rcd ->
			//check that noncashpayments total does not exceed rcd amount 
			if( rcd.noncashpayments && rcd.noncashpayments.size() > 0 && rcd.noncashpayments.amount.sum() > rcd.amount ) {
				throw new Exception('Total Non-Cash Payment for ' + rcd.fundname + ' collection must not exceed RCD amount.')
			}
			
			//check denominations 
			def totalcash = rcd.denominations?.amount?.sum() 
			totalcash = ( totalcash ? totalcash : 0.00 )
			if ( totalcash != rcd.cash ) {
				throw new Exception( 'Cash Denomination for ' + rcd.fundname + ' collection is incorrect.'  );
			}
		}
		
		//check if there are no new remittances not included in the liquidation 
		def reminfo = getUnliquidatedRemittanceInfo( liq )
		if (liq.remittancecount != reminfo.remittancecount ) {
			throw new Exception( "There are new remittances not included in this liquidation.\nPlease close and process the liquidation again." );
		}
	}
	
	void postLiquidationRcd( liq ) {
		liq.rcds.each{ rcd ->
			rcd.objid 			= 'LR' + new UID()
			rcd.schemaname 		= 'liquidationrcd'
			rcd.schemaversion 	= '1.0'
			rcd.docstate		= 'OPEN' 
			rcd.liquidationid   = liq.objid 
			rcd.liquidationno   = liq.txnno 
			rcd.liquidationdate = liq.txndate 
			rcd.lqofficerid     = liq.liquidatingofficerid
			rcd.lqofficername   = liq.liquidatingofficername
			rcd.lqofficertitle  = liq.liquidatingofficertitle 
			
			em.validate( rcd.schemaname, rcd )
			em.create( rcd.schemaname, rcd ) 
			
			updateReceiptItemRcdId( rcd )
			updateNonCashPaymentLiquidationIdReference( rcd )
		}
	}
	
	void postLiquidationRcdMulti( liq ) {
		liq.rcds.each{ rcd ->
			rcd.objid 			= 'LR' + new UID()
			rcd.schemaname 		= 'liquidationrcd'
			rcd.schemaversion 	= '1.0'
			rcd.docstate		= 'OPEN' 
			rcd.liquidationid   = liq.objid 
			rcd.liquidationno   = liq.txnno 
			rcd.liquidationdate = liq.txndate 
			rcd.lqofficerid     = liq.liquidatingofficerid
			rcd.lqofficername   = liq.liquidatingofficername
			rcd.lqofficertitle  = liq.liquidatingofficertitle 
			
			em.validate( rcd.schemaname, rcd )
			em.create( rcd.schemaname, rcd ) 
			
			updateReceiptItemRcdId( rcd )
			updateNonCashPaymentLiquidationIdReference( rcd )
			updatePaymentItemLiquidationIdReference( liq, rcd )
		}
		
	}
	
	private void updatePaymentItemLiquidationIdReference( def liq, def rcd ){
		liq.remittances.each{ r ->	
			em.sqlContext.createNamedQuery( 'liquidation:getPaymentItem').setParameter( 'remittanceid', r.objid ).resultList.each{
				em.sqlContext.createNamedExecutor( 'liquidation:updateNonCashPaymentLiquidationId' )
					.setParameters( 
						[
							objid: it.objid,
							liquidationid: liq.objid,
							liquidationrcdid: rcd.objid
						]
					).execute()
			}			
		}
	}	
	
	void updateReceiptItemRcdId( rcd ) {
		def params = [
			liquidationrcdid : rcd.objid, 
			liquidationid  	 : rcd.liquidationid,
			fundid 			 : rcd.fundid, 
		]
		em.sqlContext.createNamedExecutor('liquidation:updateReceiptItemRcdId')
					.setParameters( params ).execute()
		em.sqlContext.createNamedExecutor('liquidation:updateRevenueReceiptItemRcdId')
					.setParameters( params ).execute()
	}
	
	void updateNonCashPaymentLiquidationIdReference( rcd ) {		
		rcd.noncashpayments.each{ pmt ->
			def params = [
				objid			: pmt.objid, 
				liquidationid 	: rcd.liquidationid, 
				liquidationrcdid: rcd.objid, 
			]
			em.sqlContext.createNamedExecutor('liquidation:updateNonCashPaymentLiquidationId')
					.setParameters( params ).execute()
		}
	}
	
	
	void updateCashierInfo( liq ) {
		/*
		@Jessie : bugs kaau ni
		
		def cashiers = usrsvc.getUsersByRole( CASHIER_ROLE )
		if( ! cashiers ) throw new Exception('Cashier is not defined.')
		def cashier = cashiers[0]
		*/
		
		liq.depositedbyid 		= null 
		liq.depositedbyname 	= null 
		liq.depositedbytitle 	= null 
		
		if( liq.cashier ) {
			liq.depositedbyid 		= liq.cashier.cashierid  
			liq.depositedbyname 	= liq.cashier.cashiername  
			liq.depositedbytitle 	= liq.cashier.cashiertitle 
		}
		
	}
	
	@ProxyMethod  
	public def getCashierlist(){
		return em.sqlContext.createNamedQuery( 'liquidation:getCashierlist' ).resultList
	}
	
	void updateRCDCashierInfo( liq ){
		liq.rcds.each { rcd ->
			rcd.cashierid 		= liq.cashier.cashierid 
			rcd.cashiername 	= liq.cashier.cashiername 
			rcd.cashiertitle 	= liq.cashier.cashiertitle
		}
	}
	
	void updateRCDDenomination( liq ) {
		liq.rcds.each { rcd ->
			rcd.denominations = liq.denominations 
		}
	}
	
	private void validate( liq ) {
		def totalcash = 0.00;
		for (denom in liq.denominations) {
			totalcash += denom.amount;
		}
		if ( totalcash != liq.totalcash )
			 throw new Exception( "Cash Received must be equal to Cash Expected." );
		
		def reminfo = getUnliquidatedRemittanceInfo( liq )
		if (liq.remittancecount != reminfo.remittancecount ) {
			throw new Exception( "There are new remittances not included in this liquidation.\nPlease close and process the liquidation again." );
		}
	}
	
	private def generateLiqNo( liquidatingofficerid ) {
		def dt = dtsvc.getServerDate();
		def cal = Calendar.instance;
		cal.time = dt;
		def yr = cal.get(Calendar.YEAR);
		
		def key = 'LIQ-' + yr
		
		def userTxnCode = userSvc.getUserTxnCode( liquidatingofficerid ) 
		if( userTxnCode ) {
			key = userTxnCode + '-' + yr 
		}
				
		def series = seqsvc.getNextFormattedSeries( key );
		return key + '-' + series;
	}
	
	private void closeRemittance( liq ) {
		def params = [
			liquidationid : liq.objid,
			liquidationno : liq.txnno,
			liquidationdate : liq.txndate,
			liquidatingofficerid : liq.liquidatingofficerid
		];
		em.sqlContext.createNamedExecutor( "liquidation:closeRemittanceByLiquidatingOfficer" ).setParameters( params ).execute();
	}
	
	private void closeMultiCashierRemittance( liq ) { 	
		def params = [
			liquidationid : liq.objid,
			liquidationno : liq.txnno,
			liquidationdate : liq.txndate,
			liquidatingofficerid : liq.liquidatingofficerid
		];
		em.sqlContext.createNamedExecutor( "liquidation:closeRemittanceByLiquidatingOfficer" ).setParameters( params ).execute();
	}
	
	private void buildCustomTimeStamp( liq ) {
		def cal = Calendar.instance;
		def pd = dtsvc.parseDate( liq.txndate, null )
		liq.txntimestamp = dtsvc.buildCustomTimeStamp( liq.txndate )
		liq.iyear  = pd.year 
		liq.iqtr   = pd.qtr 
		liq.imonth = pd.month 
		liq.iday   = pd.day 
	}
	
	@ProxyMethod
	public def createLiquidationMultiCashier( liq ) {
		liq.amount = 0.0;
		liq.totalcash = 0.0;
		liq.totalotherpayment = 0.0;
		liq.treasurername  = var.get('treasurer_name');
		liq.treasurertitle = var.get('treasurer_title');
		liq.otherpayments  = getOpenNonCashPayments( liq)
		liq.rcds 		   = getOpenRcdsByFund( liq  )		 
		updateLiquidationAmountInfo( liq )
		
		if( ! liq.rcds ) 
			throw new Exception('There are no open remittances to liquidate.')
		
		//check liquidation amount = total rcds amount 
		if( liq.amount != liq.rcds.amount.sum() ) {
			throw new Exception('Liquidation amount is not equal to RCD total amount.\nFix the discrepancy before proceeding.')
		}
		return liq;
	}
	
	@ProxyMethod
	public def createLiquidation( liq ) {
		liq.amount = 0.0;
		liq.totalcash = 0.0;
		liq.totalotherpayment = 0.0;
		liq.treasurername = var.get('treasurer_name');
		liq.treasurertitle = var.get('treasurer_title');
		liq.rcds = getOpenRcdsByFund( liq )		
		updateLiquidationAmountInfo( liq )
		return liq;
	}
	
	@ProxyMethod 
	public List getOpenRemittances( liqinfo ) {
		def remits = em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceByLiquidatingOfficer" )
							.setParameter( "liquidatingofficerid", liqinfo.liquidatingofficerid )
							.setParameter( "txndate", liqinfo.txndate )
							.resultList;
							
		if ( ! remits  ) {
			throw new IllegalStateException( "There are no open remittances." );
		}
		return remits
	}
	
	@ProxyMethod
	public List getOpenNonCashPayments( liqinfo ) {
		return em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceOtherPaymentsByLiquidatingOfficer" )
								.setParameter( "liquidatingofficerid", liqinfo.liquidatingofficerid )
								.setParameter( "txndate", liqinfo.txndate )
								.resultList;
	}
	
	List getOpenRcdsByFund( liqinfo ) {
		def rcdlist = em.sqlContext.createNamedQuery( "liquidation:getOpenFundSummaries" )
								.setParameter( "lqofficerid", liqinfo.liquidatingofficerid )
								.setParameter( "txndate", liqinfo.txndate )
								.resultList;
		
		//init denominations 
		rcdlist.each { rcd ->
			rcd.cashier = null 
			rcd.noncashpayments = []
		}
		
		return rcdlist 
	}
	
	void updateLiquidationAmountInfo( liq ) {
		def reminfo = getUnliquidatedRemittanceInfo( liq ) 
		liq.amount 				= reminfo.totalamount;
		liq.totalcash 			= reminfo.totalcash;
		liq.totalotherpayment 	= reminfo.totalotherpayment;
		liq.remittancecount		= reminfo.remittancecount 
	}
	
	def getUnliquidatedRemittanceInfo( liq ) {
		return em.sqlContext.createNamedQuery( "liquidation:getUnliquidatedRemittanceInfoByLiquidatingOfficer" )
								.setParameter( "liquidatingofficerid", liq.liquidatingofficerid ) 
								.setParameter( "txndate", liq.txndate )
								.singleResult;
	}
	
	@ProxyMethod
	public def open( objid ) {
		def liq = em.read( SCHEMA_NAME, [objid:objid] );
		if( ! liq ) throw new Exception('Liquidation does not exists or has been deleted.')
		liq.rcds = loadRcds( objid )
		return liq 
	}
	
	@ProxyMethod 
	public List getLiquidatedRemittances( objid ) {
		return em.sqlContext.createNamedQuery( "liquidation:getRemittancesByLiquidation" )
					.setParameter( "liquidationid", objid )
					.resultList;
	}
	
	List loadRcds( objid ) {
		return em.sqlContext.createNamedQuery('liquidation:getRcdList')
					.setParameter('liquidationid', objid)
					.resultList 
					.each {
						it.cashier       = [cashiername:it.cashiername]
						it.denominations = em.serializer.read( it.denominations )
						it.noncashpayments = em.serializer.read( it.noncashpayments )
					}
	}
	
	private def getFundSummaries(def liquidationid){
		return em.sqlContext.createNamedQuery("liquidation:getFundSummaries")
                 .setParameter("liquidationid", liquidationid )
				 .resultList;
	}
	
	@ProxyMethod 
	public def getLiquidatedNonCashPayments( liquidationid ) {
		return em.sqlContext.createNamedQuery('liquidation:getLiquidatedNonCashPayments')
					.setParameter('liquidationid', liquidationid)
					.resultList 
	}	
}
