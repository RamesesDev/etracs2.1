<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    
    <invokers>
        <invoker type="liquidation.single" action="open" caption="Liquidate: Open" index="121" icon="images/cash.png" target="window"/>
        <invoker type="home.action" action="create" caption="Liquidate" role="LIQUIDATING_OFFICER" permission="liquidation.create" index="121" icon="images/folder.png" target="window"/>
        
        <invoker folderid="/explorer/txn/treasury/collection" action="create" caption="Liquidate" role="LIQUIDATING_OFFICER" permission="liquidation.create" index="25"/>
        <invoker type="quick_launcher" code="LIQ01" action="create" caption="Liquidate" role="LIQUIDATING_OFFICER" permission="liquidation.create" index="121"/>
        
        <invoker type="formActions" action="close" visibleWhen="#{mode != 'view' and mode != 'reports' and mode != 'rcd'}"  immediate="true" caption="Close" mnemonic="c" icon="images/doc-cancel.png"/>
        <invoker type="formActions" action="create" shortcut="ctrl N" visibleWhen="#{mode == 'view'}" immediate="true" caption="New" mnemonic="n" icon="images/doc-new.png" />
        <invoker type="formActions" action="next" shortcut="ctrl N" visibleWhen="#{mode == 'init'}" caption="Next" mnemonic="n" icon="images/next.png"/>
        <invoker type="formActions" action="back" shortcut="ctrl B" visibleWhen="#{mode == 'create'}" caption="Back" mnemonic="b" icon="images/back.png"/>
        <invoker type="formActions" action="submit" shortcut="ctrl S" visibleWhen="#{mode == 'create'}" caption="Submit" mnemonic="s" icon="images/save.png"/>
        <invoker type="formActions" action="viewRCD" visibleWhen="#{mode == 'view' and entity.objid != null}"  immediate="true" caption="A. RCD (Summary)" mnemonic="a" icon="images/doc-view.png" />
        <invoker type="formActions" action="viewRCDByFund" visibleWhen="#{entity.opener != 'single' and mode == 'view' and entity.objid != null}"  immediate="true" caption="B. RCD (By Fund)" mnemonic="a" icon="images/doc-view.png" />
        <invoker type="formActions" action="reports" visibleWhen="#{mode == 'view' and entity.objid != null}"  immediate="true" caption="Reports" mnemonic="r" icon="images/otherReports.png"/>
        <invoker type="formActions" action="backToMain" shortcut="ctrl B" visibleWhen="#{mode == 'reports' or mode == 'rcd'}" immediate="true" caption="Back" mnemonic="b" icon="images/back.png"/>
        <invoker type="formActions" action="viewReport" visibleWhen="#{mode == 'reports'}"  immediate="true" caption="Generate" mnemonic="g" icon="images/doc-view.png"/>
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*
        import java.text.DecimalFormat;
        import java.rmi.server.UID
        
        public class LiquidationController {

            @Service('LiquidationService')
            def svc;
            
            @Service('ETRACSUserService')
            def userService;
            
            @Service("DateService")
            def dtsvc;
            
            def entity;
            
            @Caller
            def caller;
            
            @Binding
            def binding;
            
            def mode;
            
            def numformat = new DecimalFormat("#,##0.00");
            
            def denominationOpener;
            
            def liquidatingofficer;
        
            def create() {
                liquidatingofficer = getLiquidatingOfficer()
                mode = 'init';
                entity = createEntity()
                return 'init';
            }
            
            def createEntity() {
                return [
                    objid                   : 'LQ' + new UID(),
                    txndate                 : dtsvc.getServerDate(),
                    liquidatingofficerid    : liquidatingofficer.objid,
                    liquidatingofficername  : liquidatingofficer.formalname,
                    liquidatingofficertitle : liquidatingofficer.jobtitle,
                    amount                  : 0.00,
                    totalcash               : 0.00,
                    totalotherpayment       : 0.00,
                ];
            }
            
            def open() {
                if (entity)
                    entity = svc.open( entity.objid );
                mode = 'view';
                denominationOpener = InvokerUtil.lookupOpener( 'cashreceipt:breakdown', [totalAmount:entity.totalcash, list:entity.denominations, mode:'view'] );
                
                return 'main';
            }
            
            def next() {
                addCashierInfo()
                entity = svc.createLiquidation( entity );
                denominationOpener = InvokerUtil.lookupOpener('cashreceipt:breakdown', [totalAmount:entity.totalcash, list:entity.denominations]);
                mode = 'create';
                return 'main';
            }
            
            def back(){
                mode = 'init';
                return 'init';
            }
            
            def submit() {
                if (! MsgBox.confirm( "Do you want to submit this document?" ) )
                    return null;
                entity.denominations = denominationOpener.handle.list;
                entity = svc.create( entity );
                if (caller)
                    caller.binding.refresh();
                mode = 'view';
                denominationOpener.handle.mode = 'view'
                binding.refresh();
                return 'main';
            }
            
            def close() {
                return '_close';
            }
            
            def viewOtherPayments() {
                if( entity.otherpayments == null ){
                    if( mode == 'create' ) 
                        entity.otherpayments = svc.getOpenNonCashPayments( entity )
                    else 
                        entity.otherpayments = svc.getLiquidatedNonCashPayments( entity.objid )
                }
                return new PopupOpener( outcome:'otherpayments' );
            }

            def viewRemittances() {
                if( entity.remittances == null ){
                    if( mode == 'create' ) 
                        entity.remittances = svc.getOpenRemittances( entity )
                    else 
                        entity.remittances = svc.getLiquidatedRemittances( entity.objid )
                }
                return new PopupOpener( outcome:'remittances' );
            }
            
            def otherPaymentHandler = [
            
                getRows    : { return 50; },
                
                getColumns : {
                    return [
                        new Column( name:"paytype", caption:"Type", minWidth:50 ),
                        new Column( name:"particulars", caption:"Info", minWidth:400 ),
                        new Column( name:"amount", caption:"Amount", format: "#,##0.00", width:100 )
                    ];
                },
                
                fetchList : { 
                    return entity.otherpayments;
                }
            
            ] as PageListModel;
            
            def getTotalOtherPayment() {
                return numformat.format( entity.totalotherpayment );
            }
            
            def remittanceHandler = [
                
                getRows    : { return 50; },
                
                getColumns : {
                    return [
                        new Column( name:"txnno", caption:"Rem. No.", minWidth:100 ),
                        new Column( name:"txndate", caption:"Date", format: "yyyy-MM-dd", minWidth:100 ),
                        new Column( name:"collectorname", caption:"Collector", minWidth:300 ),
                        new Column( name:"amount", caption:"Amount", format: "#,##0.00", width:100 )
                    ];
                },
                
                fetchList : { 
                    return entity.remittances;
                }
            
            ] as PageListModel;
            
            def getTotalAmount() {
                return numformat.format( entity.amount );
            }
            
            def getLiquidatingOfficer() {
                return userService.getLiquidatingOfficer( OsirisContext.env.USERID );
            }
            
            def reports(){
                mode = 'reports';
                return "reports";
            }

            def selectedreport;
            def reports = [];
            public def getReportList(){
                if( !reports ) reports = InvokerUtil.lookupOpeners("liquidation:report", [liquidation: entity] );
                return reports;
            }

            public def viewReport(){
                return selectedreport;
            }
            
            public def viewRCD(){
                return InvokerUtil.lookupOpener('liquidation:report_rcd', [entity:entity] );
            }
            
            public def viewRCDByFund() {
                return InvokerUtil.lookupOpener('liquidation:report_rcdbyfund', [entity:entity] );
            }
            
            def backToMain() {
                mode = 'view';
                return 'main';
            }
            
            def cashier
            
            void addCashierInfo() {
                entity.cashier = [
                    objid     : cashier.objid, 
                    cashierid : cashier.objid,
                    cashiername : cashier.formalname,
                    cashiertitle : cashier.jobtitle
                ]
                
            }
            
            def getCashierlist() {
                return userService.getCashierList(null, null)
            }

        }
        
        ]]>
    </code>
    
    <pages>
        <!--page name="view" template="etracs2.tc.HTMLViewPage" /-->
        <page name="init" template="etracs2.tc.liquidation.LiquidationInitPage" />
        <page name="main" template="etracs2.tc.liquidation.LiquidationPage" />
        <page name="otherpayments" template="etracs2.tc.liquidation.OtherPaymentListPage" />
        <page name="remittances" template="etracs2.tc.liquidation.RemittanceListPage" />
        <page name="reports" template="etracs2.tc.liquidation.LiquidationReportPage" />
    </pages>
</workunit>
