<workunit>
    <invokers>
        <invoker folderid="/menu/bp/master" action="init" caption="BP Settings" permission="bpadmin.setting" index="100"/>
        <invoker folderid="/txn/bp/master" action="init" caption="BP Settings" permission="bpadmin.setting" index="100"/>
        <invoker type="bp.master" action="init" caption="BP Settings" permission="bpadmin.setting" index="100"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" shortcut="ctrl S" icon="images/save.png"/>
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*

class BPSettingController 
{
    @Binding
    def binding;
    
    @Service('BPSettingService')
    def svc;
    
    @Service('DateService')
    def dtService
    
    def setting;

    def applicationsigngatory;
    def assessmentsignatory;
    def requirement;
    
    void init() {
        setting = svc.setting;
        if( !setting.applicationsignatories ) setting.applicationsignatories = [];
        if( !setting.assessmentsignatories ) setting.assessmentsignatories = [];
        if( !setting.requirements ) setting.requirements = [];
    }
    
    def removeItem( def item, def obj ){
        if( MsgBox.confirm('Delete selected setting?') ) {
            item.remove( obj )
        }
    }
    
    def applicationHandler = [
        getRows: {return 50;},
        getColumns: {
            return [
                new Column(name:'index', caption:'Index', editable:true),
                new Column(name:'name', caption:'Name', required:true, editable:true),
                new Column(name:'department', caption:'Department', required:true, editable:true),
                new Column(name:'title', caption:'Title', required:true, editable:true)
            ];
        },
        validate:{ validateSignatory( it.item ); },
        createItem: { return [:]; },
        onAddItem :{ if( it ) setting.applicationsignatories.add( it ); },
        onRemoveItem : { bpsttng ->
            removeItem( setting.applicationsignatories, bpsttng )
        },
        fetchList : { return setting.applicationsignatories; }
    ] as SubListModel;
    
    def assessmentHandler = [
        getRows: {return 50;},
        getColumns: {
            return [
                new Column(name:'index', caption:'Index', editable:true),
                new Column(name:'name', caption:'Name', required:true, editable:true),
                new Column(name:'department', caption:'Department', required:true, editable:true),
                new Column(name:'title', caption:'Title', required:true, editable:true)
            ];
        },
        validate: { validateSignatory(it.item); },
        createItem: { return [:]; },
        onAddItem : { if( it ) setting.assessmentsignatories.add( it ); },
        onRemoveItem : { bpbsttng ->
            removeItem( setting.assessmentsignatories, bpsttng)
        },
        fetchList : { return setting.assessmentsignatories; }
    ] as SubListModel;
    
    def requirementHandler = [
        getRows: {return 50;},
        getColumns: {
            return [
                new Column(name:'index', caption:'Index', editable:true, width:5),
                new Column(name:'requirement', caption:'Requirement', editable:false, editable:true)
            ];
        },
        validate : { validateRequirement( it.item ); },
        createItem: { return [:]; },
        onAddItem : { if( it ) setting.requirements.add( it ); },
        onRemoveItem : { bpsttng ->
            removeItem( setting.requirements, bpsttng )
        },
        fetchList : { return setting.requirements; }
    ] as SubListModel;
    
    def allowEditIntDueYear = { intrst ->
        return (intrst.idx == 12 ) ? true : false
    } as Map
    
    def interestHandler = [
        getRows: {return 14;},
        getColumns: {
            return [
                new Column(name:'monthname', caption:'Month Name', editable:false),
                new Column(name:'monthidx', caption:'Month Index', editable:true ),
                new Column(name:'day', caption:'Day', editable:true ),
                new Column(name:'year', caption:'Year', type:'integer', editableWhen:'#{root.allowEditIntDueYear[item]}', format:'0000'),
            ];
        },
        validate : { validateIntrstDueDate( it.item ) },
        fetchList : { return setting.collection.interest } 
    ] as SubListModel;
    
    def errorMsg
    def validateIntrstDueDate( item ){
        try{
            item.year = Integer.parseInt(item?.year+"")
            item.monthidx = Integer.parseInt(item?.monthidx+"")
            item.day = Integer.parseInt(item?.day+"")
            def cdate = dtService.parseCurrentDate()
            def getEndMonthDay = { month ->  
                def date = dtService.parse( 'yyyy-MM-dd', cdate.year+"-"+month+"-"+cdate.day)
                return dtService.parseDate(dtService.getMonthEndDate( date ), "").day
            } 

            if( !item.monthidx || !item.day || !item.year )
                throw new Exception( 'Invalid due date value(s). it should not be empty or zero value.' )
            else if( !(item.monthidx >= item.idx && item.monthidx <= item.idx+1) && item.idx != 12 )
                throw new Exception( "Invalid $item.monthname Month index : $item.monthidx" + ". It should be between $item.idx and " + (item.idx+1) + "." )
            else if( !(item.monthidx >=1 && item.monthidx <= 12) )
                throw new Exception( "Invalid $item.monthname Month index: $item.monthidx" + ". It should be between 1 and 12." )
            else if(!( item.day > 0 && item.day <= getEndMonthDay( item.idx ))) 
                throw new Exception( "Invalid Month day value: $item.day" + ". It should be between 1 and " + getEndMonthDay(item.idx) + "." )
            else if( !(item.year >= cdate.year && item.year <= cdate.year+1) ) 
                throw new Exception( "Invalid Year value: $item.year It should be between $cdate.year and " + (cdate.year+1) + "." )
            else if( item.idx == 12 && ((item.monthidx >= 1 && item.monthidx < 12) && item.year <= cdate.year) ) 
                throw new Exception( "Invalid $item.monthname Month index: $item.monthidx" + ". It should not be less than to 12 if the due year not greater than the current year."  )
        
            errorMsg = null
            binding?.refresh('errorMsg')
        }
        catch( e ){
            errorMsg = e.message
            binding?.refresh('errorMsg')
            throw e
        }
    }
    
    void validateSignatory( def item ){
        def sb = new StringBuffer();
        if( !item.index ) sb << "Index is required. \n";
        if( !item.name )  sb << "Name is required. \n";
        if( !item.department ) sb << "Department is required. \n";
        if( !item.title ) sb << "Title is title. \n";
        if( sb ) throw new Exception( sb.toString );
    }
    
    void validateRequirement( def item ){
        def sb = new StringBuffer();
        if( !item.index ) sb << "Index is required. \n";
        if( !item.requirement ) sb << "Requirement is required.";
        if( sb ) throw new Exception( sb.toString() );
    }
    
    void save(){
        setting = svc.save( setting );
        requirementHandler.load();
        applicationHandler.load();
        assessmentHandler.load();
    }
}

]]>
    </code>
    <pages>
        <page template="etracs2.bp.application.BPSettingPage" />
    </pages>
</workunit>