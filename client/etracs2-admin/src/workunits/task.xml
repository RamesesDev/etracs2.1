
<workunit>
    <invokers>
        <invoker type="etracsmgmt.action" caption="Manage Task" permission="etracstask.manage" target="window" icon="images/task.png"/>
        
        <invoker type="formActions" action="initCreate" permission="etracstask.create" caption="New" tooltip="New" immediate="true" mnemonic="n" icon="images/doc-add.png" visibleWhen="#{mode=='read'}"/>
        <!--
        <invoker type="formActions" action="delete" permission="etracstask.delete" caption="Delete" tooltip="Delete" immediate="true" mnemonic="d" visibleWhen="#{mode=='read' and task.taskid!=null}" icon="images/delete24.png" />
        -->
        <invoker type="formActions" action="cancel" tooltip="Cancel" immediate="true" caption="Cancel" mnemonic="c" visibleWhen="#{mode!='read'}" icon="images/remove.png"/>
        <invoker type="formActions" action="edit" tooltip="Edit" immediate="true" caption="Edit" mnemonic="e" visibleWhen="#{mode=='read'}" icon="images/edit.png"/>
        <invoker type="formActions" action="save" tooltip="Save" shortcut="ctrl s" caption="Save" mnemonic="s" visibleWhen="#{mode!='read'}" icon="images/save.png"/>

        <invoker type="formActions" action="suspend" permission="etracstask.suspend" caption="Suspend" immediate="true" visibleWhen="#{mode=='read' and task.id!=null and task.status=='active'}" />
        <invoker type="formActions" action="resume" permission="etracstask.resume" caption="Resume" immediate="true" visibleWhen="#{mode=='read' and task.id!=null and task.status=='suspended'}" />
        <invoker type="formActions" action="recover" caption="Recover" tooltip="Recover" immediate="true" mnemonic="r" visibleWhen="#{mode=='read' and task.id!=null and task.status=='error'}" icon="images/delete24.png" />
    </invokers>
    
    <code>
        <![CDATA[
        
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import java.rmi.server.UID;
        
        public class TaskMgmtController
        {
            @Binding
            def binding;
            
            @Service("TaskSchedulerService")
            def svc;
            
            def title = "Manage Task";
            def selectedItem;
            def task = [:];
            def mode = "read";
            
            void start() {
                svc.resume( task );
                task.status = 'PROCESSING';
                binding.refresh("task.*");
            }
            
            void edit() {
                mode = 'edit'
            }
            
            void suspend() {
                svc.suspend( task );
                task.status = 'SUSPENDED';
                binding.refresh("task.*");
            }
            
            void recover() {
                task.status = svc.resumeError( task );
                task.status = 'PROCESSING';
                binding.refresh("task.*");
            }
            
            void resume() {
                task.status = svc.resume( task );
                task.status = 'PROCESSING';
                binding.refresh("task.*");
            }
            
            void initCreate() {
                mode = "create";
                task = [id: 'T'+new UID()];
                binding.refresh("task.*");
            }
            
            void cancel() {
                mode = "read";
                binding.refresh();
            }
            
            void save() {
                if (mode == 'create' ) {
                    svc.create( task );
                }
                else {
                    svc.update( task );
                }
                mode = "read";
                binding.refresh();
            }
            
            void setSelectedItem( selected ) {
                selectedItem = selected;
                if( selected?.item ) 
                    task = selectedItem.item;
                else
                    task = [:];
            }
            
            def listHandler = [
                getRows    : { return 50; },
                getColumns : { 
                    return [
                        new Column(name:"item.servicetype", caption:"Type"),
                        new Column(name:"item.service", caption:"Service"),
                        new Column(name:"item.method", caption:"Method"),
                        new Column(name:"item.status", caption:"Status"),
                    ];
                },
                fetchList : { 
                    svc.getActiveTasks( it );
                },
            ] as PageListModel;
            
            void refresh() {
                listHandler.load()
            }
        }
        
        ]]>
    </code>
    
    <pages>
        <page template="etracs2.admin.task.TaskMgmtPage"/>
    </pages>
</workunit>